#!/usr/bin/env python
# 
# Copyright (c) 2006-2012 XenSource, Inc. All use and distribution of this
# copyrighted material is governed by and subject to terms and
# conditions as licensed by XenSource, Inc. All other rights reserved.
#

# Helper script for handling CA tickets in ways not supported by the Jira API.

from BeautifulSoup import BeautifulSoup
from defecttools.lib import config
import csv
import mechanize
import string
import sys

######################################################################
# URL helper functions.
######################################################################

def login_url():
    return ("%s/secure/Dashboard.jspa" % config.jira_url)

def ticket_url(ticket):
    return ("%s/browse/%s" % (config.jira_url, ticket))

def change_history_url(ticket):
    return ("%s?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel" % ticket_url(ticket))

######################################################################
# Document scraping functions.
######################################################################

def get_description(tree):
    header = tree.findAll("h3", "formtitle")[0]
    return header.contents[1]

def get_priority(tree):
    row = tree.findAll(name = "table", id = "issuedetails")[0].contents[7]
    return row.findAll(text = True)[4]

def try_with_default(tree, f, default):
    try:
        result = f(tree)
        return string.strip(result)
    except:
        return default

######################################################################
# Functions corresponding to the available commands.
######################################################################

field_getters = [
    ("Description", get_description),
    ("Priority", get_priority),
]

# Attempt to find as much useful information about a ticket as possible.
# Print the result as a line of csv.
def summarise_one(browser, ticket, writer):
    response = browser.open(change_history_url(ticket))
    html = response.get_data()
    tree = BeautifulSoup(html)
    results = [ticket] + map(lambda (_, f): try_with_default(tree, f, "unknown"), field_getters)
    writer.writerow(results)

# Write a header showing the field names, then find the fields for each ticket.
def summarise(browser, tickets):
    writer = csv.writer(sys.stdout)
    writer.writerow(["Key"] + map(lambda (key, _): key, field_getters))
    for ticket in tickets:
        summarise_one(browser, ticket, writer)

# Add the global config username to the watch list of each ticket.
def watch_one(browser, ticket):
    print "Watching ticket %s" % ticket
    browser.open(ticket_url(ticket))
    browser.follow_link(text_regex = r"Watching", nr=0)
    browser.select_form(name = "startform")
    browser["userNames"] = config.jira_username
    browser.submit()

def watch(browser, tickets):
    for ticket in tickets:
        watch_one(browser, ticket)

######################################################################
# Functions used by all commands.
######################################################################

# Return an instance of mechanize.Browser which has logged in to Jira.
def jira_login():
    url = login_url()
    print "Logging in to Jira at %s" % url
    browser = mechanize.Browser()
    browser.open(url)
    browser.select_form(name = "loginform")
    browser["os_username"] = config.jira_username
    browser["os_password"] = config.jira_password
    browser.submit()
    return browser

def usage():
    print """
Usage:
    %s command ticket1(,ticket2(,ticket3...))
"""

dispatcher = {
    "summarise": summarise,
    "watch": watch,
}

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print "Expected at least 3 arguments."
        usage()
    else:
        command = sys.argv[1]
        tickets = map(string.upper, sys.argv[2:])
        if dispatcher.has_key(command):
            config.load_config()
            browser = jira_login()
            dispatcher[command](browser, tickets)
        else:
            print "Unknown command: %s" % command
            usage()
