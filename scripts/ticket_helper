#!/usr/bin/env python
# 
# Copyright (c) 2006-2012 XenSource, Inc. All use and distribution of this
# copyrighted material is governed by and subject to terms and
# conditions as licensed by XenSource, Inc. All other rights reserved.
#

# Helper script for handling CA tickets in ways not supported by the Jira API.

from defecttools.lib import config
import mechanize
import sys

######################################################################
# Helper functions
######################################################################

def login_url():
    return ("%s/secure/Dashboard.jspa" % config.jira_url)

def ticket_url(ticket):
    return ("%s/browse/%s" % (config.jira_url, ticket))

######################################################################
# Functions corresponding to the available commands.
######################################################################

# Add the global config username to the watch list of each ticket.
def watch(browser, ticket):
    print "Watching ticket %s" % ticket
    browser.open(ticket_url(ticket))
    browser.follow_link(text_regex = r"Watching", nr=0)
    browser.select_form(name = "startform")
    browser["userNames"] = config.jira_username
    browser.submit()

######################################################################
# Functions used by all commands.
######################################################################

# Return an instance of mechanize.Browser which has logged in to Jira.
def jira_login():
    url = login_url()
    print "Logging in to Jira at %s" % url
    browser = mechanize.Browser()
    browser.open(url)
    browser.select_form(name = "loginform")
    browser["os_username"] = config.jira_username
    browser["os_password"] = config.jira_password
    browser.submit()
    return browser

def usage():
    print """
Usage:
    %s command ticket1(,ticket2(,ticket3...))
"""

dispatcher = {
    "watch": watch,
}

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print "Expected 3 arguments."
        usage()
    else:
        config.load_config()
        browser = jira_login()
        command = sys.argv[1]
        tickets = sys.argv[2].split(",")
        if dispatcher.has_key(command):
            for ticket in tickets:
                dispatcher[command](browser, ticket)
        else:
            print "Unknown command."
            usage()
