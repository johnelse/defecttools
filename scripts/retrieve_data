#!/usr/bin/env python 

import os
import time
import sys
import string
import xmlrpclib
import logging
import pprint

from jira.client import JIRA
from defecttools.lib import config
from sqlite3 import *

def connect_jira(log, jira_server, jira_user, jira_password):
    	'''
    	Connect to JIRA. Return None on error
    	'''
    	try:
        	log.info("Connecting to JIRA: %s" % jira_server)
        	jira_options = {'server': jira_server}
        	jira = JIRA(options=jira_options, basic_auth=(jira_user,jira_password))
        	return jira
    	except Exception,e:
        	log.error("Failed to connect to JIRA: %s" % e)
        	return None

def list_filters(conn):
    	curs = conn.cursor()
    	try:
        	curs.execute("SELECT * FROM filters")
        	results = {}
        	for row in curs:
            		results[row[0]] = str(row[3])
        	return results
    	finally:
        	curs.close()

def add_observation(conn, filter_id, issue_key, time):
	curs = conn.cursor()
	try:
		curs.execute("INSERT INTO observations VALUES ('%d','%s',%.0f)" % (filter_id, issue_key, time))
	finally:
		curs.close()

def register_ticket(conn, issue_key):
	curs = conn.cursor()
	try:
		curs.execute("SELECT * FROM tickets WHERE id='%s'" % issue_key)
		if curs.fetchall() == []:
			curs.execute("INSERT INTO tickets VALUES ('%s','')" % issue_key)
	finally:
		curs.close()

if __name__ == "__main__":
	_config = config.get_config()
 	#Logging
	logging.basicConfig()
	logger = logging.getLogger()	
	#Options
	j = connect_jira(logger, _config.jira_url,_config.jira_username,_config.jira_password)
	#Database
	conn = connect(_config.database)
 	#Timestamp
	t = time.time()
	#Get all the filters from the database
	filters = list_filters(conn)
	#Filter
	for filter_key in filters.keys():
		filter_id = filters[filter_key]
		filter_object = j.filter(filter_id)
		filter_issues = j.search_issues(filter_object.jql)
		logger.info("Filter %d: %s" % (filter_key, filter_id))
		logger.info("-----------------------------------------------------")		
 		for issue_object in filter_issues:
			logger.info(issue_object.key)
			add_observation(conn,filter_key,issue_object.key, t)
			register_ticket(conn,issue_object.key)
	conn.commit()
	





