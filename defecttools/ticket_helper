#!/usr/bin/env python
# 
# Copyright (C) Citrix Systems Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation; version 2.1 only. 
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.

# Helper script for handling CA tickets in ways not supported by the Jira API.

from BeautifulSoup import BeautifulSoup
from defecttools.lib import config
import csv
import mechanize
import string
import sys

_config = config.get_config()

######################################################################
# URL helper functions.
######################################################################

def login_url():
    return ("%s/secure/Dashboard.jspa" % _config.jira_url)

def ticket_url(ticket):
    return ("%s/browse/%s" % (_config.jira_url, ticket))

def change_history_url(ticket):
    return ("%s?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel" % ticket_url(ticket))

######################################################################
# Other helper functions.
######################################################################

def get_words(value, separator):
    if string.strip(value) == "":
        return []
    else:
        return string.split(value, separator)

######################################################################
# Document scraping functions.
######################################################################

def get_description(tree):
    header = tree.findAll("h3", "formtitle")[0]
    return header.contents[1]

def get_priority(tree):
    row = tree.findAll(name = "table", id = "issuedetails")[0].contents[7]
    return row.findAll(text = True)[4]

def try_with_default(tree, f, default):
    try:
        result = f(tree)
        return string.strip(result)
    except:
        return default

######################################################################
# Functions corresponding to the available commands.
######################################################################

field_getters = [
    ("Description", get_description),
    ("Priority", get_priority),
]

# Attempt to find as much useful information about a ticket as possible.
# Print the result as a line of csv.
def summarise_one(browser, ticket, writer):
    response = browser.open(change_history_url(ticket))
    html = response.get_data()
    tree = BeautifulSoup(html)
    results = [ticket] + map(lambda (_, f): try_with_default(tree, f, "unknown"), field_getters)
    writer.writerow(results)

# Write a header showing the field names, then find the fields for each ticket.
def summarise(browser, tickets):
    writer = csv.writer(sys.stdout)
    writer.writerow(["Key"] + map(lambda (key, _): key, field_getters))
    for ticket in tickets:
        summarise_one(browser, ticket, writer)

# Add the global config username to the watch list of the ticket.
def watch_one(browser, ticket):
    print "Watching ticket %s" % ticket
    browser.open(ticket_url(ticket))
    browser.follow_link(text_regex = r"Watching", nr=0)
    browser.select_form(name = "startform")
    browser["userNames"] = _config.jira_username
    browser.submit()

# Watch each ticket in the list.
def watch(browser, tickets):
    for ticket in tickets:
        watch_one(browser, ticket)

# Add the "FIXED: " prefix to the summary, and "fix-tr3" to the tags.
def fix_one(browser, ticket):
    print "Marking ticket %s as fixed" % ticket
    fixed_prefix = "FIXED: "
    fixed_tag = "fix-tr3"
    browser.open(ticket_url(ticket))
    browser.follow_link(text_regex = r"Edit", nr=0)
    browser.select_form(name = "jiraform")
    # Update tags.
    tags = get_words(browser["customfield_10190"], " ")
    if not fixed_tag in tags:
        tags.append(fixed_tag)
        browser["customfield_10190"] = " ".join(tags)
    # Update summary.
    summary = browser["summary"]
    if not summary[0:len(fixed_prefix)] == fixed_prefix:
        browser["summary"] = fixed_prefix + summary
    browser.submit()

# Mark each ticket in the list as fixed.
def fix(browser, tickets):
    for ticket in tickets:
        fix_one(browser, ticket)

######################################################################
# Functions used by all commands.
######################################################################

# Return an instance of mechanize.Browser which has logged in to Jira.
def jira_login():
    url = login_url()
    print "Logging in to Jira at %s" % url
    browser = mechanize.Browser()
    browser.open(url)
    browser.select_form(name = "loginform")
    browser["os_username"] = _config.jira_username
    browser["os_password"] = _config.jira_password
    browser.submit()
    return browser

dispatcher = {
    "summarise": summarise,
    "watch": watch,
    "fix": fix,
}

def usage():
    print """
Usage:
    %s command ticket1(,ticket2(,ticket3...))

    Available commands:
        %s
""" % (sys.argv[0], "; ".join(dispatcher.keys()))

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print "Expected at least 3 arguments."
        usage()
    else:
        command = sys.argv[1]
        tickets = map(string.upper, sys.argv[2:])
        if dispatcher.has_key(command):
            browser = jira_login()
            dispatcher[command](browser, tickets)
        else:
            print "Unknown command: %s" % command
            usage()
