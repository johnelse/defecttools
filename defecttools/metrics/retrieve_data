#!/usr/bin/env python
# 
# Copyright (C) Citrix Systems Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation; version 2.1 only.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.



# Harrie <harrie.pieters@citrix.com>

import os
import time
import sys
import string
import xmlrpclib
import logging
import pymongo

from jira.client import JIRA
from defecttools.lib import config

def connect_jira(log, jira_server, jira_user, jira_password):
    '''
    Connect to JIRA. Return None on error
    '''
    try:
        log.info("Connecting to JIRA: %s" % jira_server)
        jira_options = {'server': jira_server}
        jira = JIRA(options=jira_options, basic_auth=(jira_user,jira_password))
        return jira
    except Exception,e:
        log.error("Failed to connect to JIRA: %s" % e)
        return None

def connect_database(log, database_host, database_port):
	'''
	Connect to MongoDB. Return None on error
	'''
	try:
		log.info("Connecting to MongoDB: %s:%s" % (database_host, str(database_port)))
		db = pymongo.MongoClient(database_host, database_port)
		table = db.jirametrics
		return table
	except Exception,e:
		log.error("Failed to connect to MongoDB: %s" % e)
		return None

def get_filters(log, db):
	'''
	Get all the filters from the database. Return None on error
	'''
	try:
		log.info("Getting all filters from collection")
		filters = db.filters.find()
		return filters
	except Exception,e:
		log.error("Failed to get filters from collection: %s" % e)
		return None

def insert_observation(log, db, filter, tickets, timestamp):
	'''
	Insert all observations of this check in the database
	'''
	try:
		log.info("Inserting all obeservations into the database")
		observations 	= db.observations.find_one(timestamp)
		if observations is None:
			db.observations.insert({"_id": timestamp})
		
		tickets 		= ", ".join(tickets)
		post			= { "tickets": tickets }
		db.observations.update({'_id' : timestamp}, {'$set' : { filter : post }})
	except Exception,e:
		log.error("Failed to insert into collection: %s" % e)
		return None

def insert_page(log, db, jira, page):
	'''
	Insert page into confluence
	'''
	log.info("Inserting %s into Confluence" % page)
	cursor				= db.observations.find({}).skip(1).sort({'_id':-1}).limit(1)
	latest_data			= db.observations.find_one(timestamp)
	print cursor
	print latest

#def check_timestamp_new(log, ):

#def check_timestamp_closed(log, ):



def template_main(log, inflow, non_movers, outflow, page):
	'''
	Define template
	'''
	try:
		log.info("Writing confluence page to file")
		filename 	= "/tmp/content.%d" % page
		f 			= open(filename, "w")
		print >>f, "This page is automatically generated; do not edit."
		print >>f, "{color:#888888}h2. Inflow{color}"
		print >>f, template_table(log, inflow)
		print >>f, "{color:#888888}h2. Non-movers{color}"
		print >>f, template_table(log, non_movers)
		print >>f, "{color:#888888}h2. Outflow{color}"
		print >>f, template_table(log, outflow)
		f.close()
		f 			= open(filename, "r")
		read 		= f.read()
		f.close()
		return read
	except Exception,e:
		log.error("Failed to create page: %s" % e)
		return None

def template_table(log, data):
	'''
	Define table
	'''
	log.info("Writing graph")
	graph = "{jira:key in (%s)\|server=jira\|columns=type,key,summary,priority,status,updated,assignee\|renderMode=static}" % data
	return graph

# Execute main python code
if __name__ == "__main__":
	#Get configuration from the file specified in lib/config.py
	_config 	= config.get_config()
	#Logging
	logging.basicConfig()
	log 		= logging.getLogger()	
	#Jira
	_jira 		= connect_jira(log, _config.jira_url,_config.jira_username,_config.jira_password)
	#Database
	_db 		= connect_database(log,_config.db_host,_config.db_port)
	#Check if it has any use to continue
	if not (_jira is None) or not (_db is None):
		#Timestamp
		timestamp 	= time.time()
		#Get Filters
		filters 	= get_filters(log, _db)

		#1. 	Loop through filters & Insert all the data in the database

		for item in filters:
			filter_id 		= str(int(item['id']))
			print filter_id
			filter_object 	= _jira.filter(filter_id)
			filter_issues 	= _jira.search_issues(filter_object.jql)
			log.info("Filter %s: %s" % (item['name'], filter_id))
			log.info("-----------------------------------------------------")
 			tickets 		= []
 			for issue_object in filter_issues:
				log.info("Inserting: %s" % issue_object.key)
				tickets.append(issue_object.key)
			insert_observation(log, _db, filter_id, tickets, timestamp)

		#2. 	Insert the data in the page
		# TODO dynamically add
		insert_page(log, _db, _jira, "Clearwater+Metrics")


	else:
		log.error("Failed to execute, connection to Jira or Mongo Failed.")